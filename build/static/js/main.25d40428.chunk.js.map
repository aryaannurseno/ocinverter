{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Example","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","num","state","value","split","map","e","includes","alert","setState","data","Digital","Number","Label","dataAnalog","console","log","abc","els","dataReal","event","target","_this2","react_default","a","createElement","es6","width","height","margin","top","right","left","bottom","barCategoryGap","dataKey","stroke","fill","strokeDasharray","type","activeDot","r","id","onChange","handleChange","ref","input","myinput","onClick","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","App_Example","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25d40428.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  BarChart, Bar, XAxis, Legend, LineChart, CartesianGrid, YAxis,  Tooltip, Line\n} from 'recharts';\n\n\n\n\nexport default class Example extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n    value: '',\n    data:[],\n    dataAnalog: [],\n    }\n  }\n  \n  handleChange (event) {\n    this.setState({value: event.target.value});    \n\n\n\n  }\n  handleClick = () => {\n\n    const num = this.state.value.split('');\n    const valid = num.map(e =>{\n      if(e.includes(1) || e.includes(0)){\n        return true\n      }\n      else{\n        return false\n      }\n    })\n    if(valid.includes(false)){\n      alert('Bukan angka 1 atau 0')\n      this.setState({ value: '' });\n    }\n    else{\n      let data = num.map(e =>{\n        if(e == 0){\n          return(\n            {\n              Digital: Number(e) - 1,\n              Label: 0\n            }\n    \n          )\n  \n        }\n        else{\n          return(\n            {\n              Digital: Number(e),\n              Label: 1\n            }\n    \n          )\n        }\n      })\n      let dataAnalog = num.map(e =>{\n        this.setState({dataAnalog :{\n          Digital: 0,\n          Label: 0\n\n        }})\n       \n        if(e == 0){\n          return(\n            \n\n              {\n                Digital: Number(e) - 1,\n                Label: 0\n              }\n            \n             )\n  \n        }\n        else{\n          return(\n            {\n              Digital: Number(e),\n              Label: 0\n            }\n    \n          )\n        }\n\n      })\n      console.log(this.state.dataAnalog)\n\n      console.log(dataAnalog)\n      this.setState({data: data})\n      this.setState({dataAnalog : dataAnalog}, function () {\n        \n       let abc = this.state.dataAnalog.map((e, els) =>{\n          return e[els]\n        })\n        this.setState({dataReal: abc}, function(){\n          console.log(this.state.dataReal)\n        })\n    })\n      this.setState({ value: ''})\n\n\n\n    }\n\n \n  }\n  \n\n  render() {\n    return (\n      <div>\n      <BarChart\n        width={1000}\n        height={300}\n        data={this.state.data}\n        margin={{\n          top: 20, right: 30, left: 20, bottom: 5,\n        }}\n        barCategoryGap={-1}\n        \n      >\n      <XAxis dataKey=\"Label\" />\n        <Legend />\n        <Bar dataKey=\"Digital\" stroke=\"1\" fill=\"black\" />\n      </BarChart>\n      \n      <LineChart\n                width={500}\n                height={300}\n                data={\n                  this.state.dataAnalog\n\n                }\n                margin={{\n                  top: 5, right: 30, left: 20, bottom: 5,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                <Line type=\"monotone\" dataKey=\"Digital\" stroke=\"#82ca9d\" />\n              </LineChart>\n            <div>\n            <input id=\"1\" value={this.state.value}  onChange={(e) => {this.handleChange(e)}} ref={(input)=> this.myinput = input}/>\n            <button onClick={this.handleClick}>CLICK ME</button>\n            <p> {this.state.value} </p>\n          </div>\n          \n          </div>\n\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}